/*
 * generated by Xtext 2.35.0
 */
package org.xtext.ovyhtml.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ovyhtml.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.ovyhtml.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getBalise_TypeAccess().getAlternatives(), "rule__Balise_Type__Alternatives");
			builder.put(grammarAccess.getAttr_TypeAccess().getAlternatives(), "rule__Attr_Type__Alternatives");
			builder.put(grammarAccess.getHTMLAccess().getGroup(), "rule__HTML__Group__0");
			builder.put(grammarAccess.getHTMLAccess().getGroup_5(), "rule__HTML__Group_5__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup(), "rule__Balise__Group__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup_3(), "rule__Balise__Group_3__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup_3_3(), "rule__Balise__Group_3_3__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup_4(), "rule__Balise__Group_4__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup_4_3(), "rule__Balise__Group_4_3__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup_5(), "rule__Balise__Group_5__0");
			builder.put(grammarAccess.getBaliseAccess().getGroup_5_3(), "rule__Balise__Group_5_3__0");
			builder.put(grammarAccess.getAttributAccess().getGroup(), "rule__Attribut__Group__0");
			builder.put(grammarAccess.getAttributAccess().getGroup_3(), "rule__Attribut__Group_3__0");
			builder.put(grammarAccess.getAttributAccess().getGroup_3_3(), "rule__Attribut__Group_3_3__0");
			builder.put(grammarAccess.getAttributAccess().getGroup_4(), "rule__Attribut__Group_4__0");
			builder.put(grammarAccess.getHTMLAccess().getBaliseAssignment_4(), "rule__HTML__BaliseAssignment_4");
			builder.put(grammarAccess.getHTMLAccess().getBaliseAssignment_5_1(), "rule__HTML__BaliseAssignment_5_1");
			builder.put(grammarAccess.getBaliseAccess().getNomAssignment_3_2(), "rule__Balise__NomAssignment_3_2");
			builder.put(grammarAccess.getBaliseAccess().getNomAssignment_3_3_1(), "rule__Balise__NomAssignment_3_3_1");
			builder.put(grammarAccess.getBaliseAccess().getBaliseAssignment_4_2(), "rule__Balise__BaliseAssignment_4_2");
			builder.put(grammarAccess.getBaliseAccess().getBaliseAssignment_4_3_1(), "rule__Balise__BaliseAssignment_4_3_1");
			builder.put(grammarAccess.getBaliseAccess().getAttributAssignment_5_2(), "rule__Balise__AttributAssignment_5_2");
			builder.put(grammarAccess.getBaliseAccess().getAttributAssignment_5_3_1(), "rule__Balise__AttributAssignment_5_3_1");
			builder.put(grammarAccess.getAttributAccess().getNom_attrAssignment_3_2(), "rule__Attribut__Nom_attrAssignment_3_2");
			builder.put(grammarAccess.getAttributAccess().getNom_attrAssignment_3_3_1(), "rule__Attribut__Nom_attrAssignment_3_3_1");
			builder.put(grammarAccess.getAttributAccess().getContenuAssignment_4_1(), "rule__Attribut__ContenuAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
